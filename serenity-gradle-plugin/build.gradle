import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

ext {
    bintrayPackage = 'serenity-gradle-plugin'
    projectDescription = 'Serenity Gradle Plugin'
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/classpath")
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir
    doLast {
        outputDir.mkdirs()
        def classpath=file("$outputDir/plugin-classpath.txt")
        def text=""
        sourceSets.main.runtimeClasspath.each {
            if(!it.isDirectory() && it.name.endsWith(".jar")){
                text+="$it.absolutePath\n"
            }
        }
        classpath.text=text
    }
}

def cloneGeneratedJars(def project) {
    def destination = Files.createDirectories(Paths.get("$buildDir").resolve("libs"))
    project.buildDir.toPath().resolve("libs").eachFile {
        Files.copy(it,
            destination.resolve(it.toFile().getName()),
            StandardCopyOption.REPLACE_EXISTING)
    }
}

task copySerenityCore(dependsOn: ':serenity-core:jar') {
    doLast {
        cloneGeneratedJars(project(':serenity-core'))
    }
}

task copySerenityJunit(dependsOn: ':serenity-junit:jar') {
    doLast {
        cloneGeneratedJars(project(':serenity-junit'))
    }
}

dependencies {
    compile gradleApi()
//    compile localGroovy()
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile project(':serenity-core')
    compile project(':serenity-junit')
    testCompile "junit:junit:${junitVersion}"
    testCompile project(':serenity-core').sourceSets.test.output
    testCompile project(':serenity-junit').sourceSets.test.output
    testRuntime files(copySerenityCore)
    testRuntime files(copySerenityJunit)
    testRuntime files(createClasspathManifest)
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
buildscript {
    ext.kotlin_version = '1.0.1'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'kotlin'
repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
